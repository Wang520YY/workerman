<?php
use \Workerman\Worker;
use \Workerman\Autoloader;

// 自动加载类
require_once __DIR__ . '/../../Workerman/Autoloader.php';
Autoloader::setRootPath(__DIR__);

// ChatNotice 进程，这个进程主要用于前端接收推送的消息
$worker = new Worker("Websocket://0.0.0.0:9003");
// 设置名称，方便status时查看
$worker->name = 'MsgNotice';
// 设置进程数,此处只能为1（为了避免客户端连到不同进程，count设置为1）
$worker->count = 1;
$worker->registerAddress = $gateway_registerAddress . ':' . $businessworker_port;

// worker进程启动后建立一个内部通讯端口，这个进程主要用于后端往前端推送消息
$worker->onWorkerStart = function($worker) {
    // 开启一个内部端口，方便内部系统推送数据，Text协议格式 文本+换行符
    $inner_text_worker = new Worker('Text://0.0.0.0:9001');
    $inner_text_worker->onMessage = function($connection, $message) {
        global $worker;
        // $message数组格式array('type'=>'wxBind', 'msg'=>array('uid'=>1411288,'status'=>1))，里面有uid，表示向那个uid的客户端推送数据
        $data = json_decode($message, true);
        $ret = sendMessageByUid($data['adminId'], json_encode($data));
        $back = $ret ? 1 : 0;
        // 返回推送结果
        $connection->send($back);
    };
    $inner_text_worker->listen();
};

// 新增加一个属性，用来保存uid到connection的映射
$worker->uidConnections = array();
// 当有客户端发来消息时执行的回调函数
$worker->onMessage = function($connection, $message)use($worker) {
	$message = json_decode($message,true);
    if(!empty($message['ping']) && isset($connection->uid)){
          //sendMessageByUid($connection->uid, '{pong:"1"}');
          return;
    }
    // 判断当前客户端是否已经验证,既是否设置了uid
    if(!isset($connection->uid)){
        // 没验证的话把第一个包当做uid（这里为了方便演示，没做真正的验证）
        $connection->uid = $message['adminId'];
   
        /* 保存uid到connection的映射，这样可以方便的通过uid查找connection，
         * 实现针对特定uid推送数据
         */
        $worker->uidConnections[$connection->uid] = $connection;
        return;
    }
};

// 当有客户端连接断开时
$worker->onClose = function($connection)use($worker) {
    global $worker;
    if (isset($connection->uid)) {
        // 连接断开时删除映射
        unset($worker->uidConnections[$connection->uid]);
    }
};

// 向所有验证的用户推送数据
function broadcast($message) {
    global $worker;
    foreach ($worker->uidConnections as $connection) {
        $connection->send($message);
    }
}

// 针对uid推送数据
function sendMessageByUid($uid, $message) {
    global $worker;
    if (isset($worker->uidConnections[$uid])) {
        $connection = $worker->uidConnections[$uid];
        $connection->send($message);
        return true;
    }
    return false;
}
// 如果不是在根目录启动，则运行runAll方法
if (!defined('GLOBAL_START')) {
    Worker::runAll();
}

